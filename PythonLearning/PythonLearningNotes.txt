*********************搭建Python开发环境******************************
~1.如何配置Python 开发平台（Windows7环境下）
a、从Python官网下载 Python2.7
https://www.python.org/
b、安装Python2.7时选择勾上pip和自动配置环境变量（默认Python安装路径C:\Python27）
若未自动配置环境变量，手动配置也可
c、确定Python和pip安装成功后（命令行下输入python进入python交互式环境>>>），
附安装第三方模块PIL的方法 pip install PIL提示出错，因为PIL官方只支持32位，没有提供64位版本
可以安装非官方模块Pillow代替,pip install Pillow
http://effbot.org/downloads#pil

d、通过pip安装selenium:pip install selenium
或通过下载包安装python2.7，安装selenium版本是3.4.3


~2、Python解释器
默认CPython（C语言实现）

~3、第一个Python程序
print 'Hello,World!' 
#Python中字符串使用单引号或双引号括起来

~4、输入和输出
print语句加上多个字符串，字符串可以使用逗号分隔，便可以依次打印字符串

输入方法raw_input()和变量的概念

~5、Python基础
a、Python语法采用缩进方式表示，坚持使用4个空格进行缩进
b、以#开头的语句是注释
c、Python程序大小写敏感
d、不能简单“复制-粘贴”代码，必须检查缩进格式

~6、数据类型和变量
***整数
十六进制用0x前缀和0~9,a~f表示，如0xff00,0xa5b4c3d2等等
***浮点数
浮点数是使用科学计数法表示的小数
整数计算永远是精确的（包括除法）
而浮点数运算可能会有四舍五入的误差
***字符串
以引号（单引号、双引号）括起来的任何文本
转义字符\
\n 换行符
\t 制表符
\\ 表示\
用r''表示''内部与的字符串默认不转义
'''...'''格式可以表示多行内容
r''' ...''' 表示多行内容，且字符串不转义
***布尔值
True
False
and or not 运算
***空值None
None不是0，有特殊意义
***变量
变量名称必须是 大小写英文、数字和_的组合，且不能以数字开头

在Python中'='是赋值语句

Python是动态语言
***常量
常量变量名通常全部大写

小结：Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来

~7、字符串和编码
1byte = 8 bits (8位可以表示00000000~11111111,即0~255)
两个字节可以表示的最大整数65535，四个字节时 是4294967295
美国人发明ASCII编码，包括英文大小写、数字、一些符号

中国制定GB2312（包含ASCII编码）用两个字节表示中文

Unicode通常2个字节
"可变长编码"的UTF-8编码
计算机内存中，统一使用Unicode编码，需要保存到硬盘或传输时，转换为UTF-8编码
如记事本编辑：
内存:Unicode编码  ---> 文件中 :UTF-8编码
文件中 :UTF-8编码 ---> 内存:Unicode编码 
如浏览网页时：
服务器:Unicode编码  ---> 输出UTF-8编码网页 --->浏览器

***Python的字符串
ord()函数 和 chr()函数

Unicode字符串用u'...'表示

u'中文'.encode('utf-8')    #---->转换成utf8编码

len()函数返回字符串的长度

'...'.decode('utf-8') #---->把utf-8字符串转换成unicode编码
Python源代码文件也是一个文本文件，建议加上这两行:
#!/usr/bin/env python  #告诉Linux/OS X系统，这是一个python可执行程序
# -*- coding: utf-8 -*- #告诉Python解释器，按UTF-8编码读取源代码

如果你使用Notepad++进行编辑，除了要加上# -*- coding: utf-8 -*-外，中文字符串必须是Unicode字符串

***格式化输出
>>>'Hello,%s'%'world'
>>>'Hi,%s,you have $%d.'('mike',100)

%s 字符串
%d 整数
%f 浮点数
%x 十六进制整数

a、其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数
b、如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串
c、有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%

~8、使用list和tuple（Python内置的数据类型list、tuple）
list:有序的集合
>>>list_name = []
len()函数可以获得list元素的个数
>>>list_name[index]
append()函数
insert()函数
pop()函数 pop(index)

tuple:有序的元组
>>>tuple_name = ()
tuple一旦初始化变不能修改 ----> tuple初始化后不能通过编辑元素的方式修改元素的值，除非该元素是list

~9、条件判断和循环
if condition1:
    action1
elif condition2:
    action2
    ......
    ......
else:
    action
    
***for循环

for i in range(1,100):
        action

***while循环
sum = 0
n = 99
while n > 0:
    sum = sum + n
    n = n - 2
print sum

~10、使用dict和set（Python内置数据类型dict、set）
***dict
dict全称dictionary，对应于其它语言的map，使用键值对存储key-value
>>> d = {key1:value,key2:value2...}

dict内部存放的顺序和key放入的顺序没有关系

dict的key必须是不可变对象
在Python中，字符串、整数都是不可变的，可以作为key，而list不行

set是一组key的集合，但不存储value，且在set中没有重复的key

>>>s = set(list[...])

重复元素在set中自动被过滤

set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作

~11、函数
函数是最基本的一种代码抽象的方式
Python内置函数 abs()、cmp()
数据类型转换函数 int()、float()、str()、unicode()、bool()

定义函数
def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x
        
定义函数时，需要确定函数名和参数个数；

如果有必要，可以先对参数的数据类型做检查；

函数体内部可以用return随时返回函数结果；

函数执行完毕也没有return语句时，自动return None。

函数可以同时返回多个值，但其实就是一个tuple。
        
        
***函数的参数

默认参数
当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数

默认参数必须指向不变对象

可变参数
参数个数可变

定义可变参数和定义list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数

def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
    
个人理解：可以当成指针进行理解，被处理成指针了

关键字参数

可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict

函数的参数

阅读: 272350
定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。对于函数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解。

Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。

默认参数

我们仍以具体的例子来说明如何定义函数的默认参数。先写一个计算x2的函数：

def power(x):
    return x * x
当我们调用power函数时，必须传入有且仅有的一个参数x：

>>> power(5)
25
>>> power(15)
225
现在，如果我们要计算x3怎么办？可以再定义一个power3函数，但是如果要计算x4、x5……怎么办？我们不可能定义无限多个函数。

你也许想到了，可以把power(x)修改为power(x, n)，用来计算xn，说干就干：

def power(x, n):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
对于这个修改后的power函数，可以计算任意n次方：

>>> power(5, 2)
25
>>> power(5, 3)
125
但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码无法正常调用：

>>> power(5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: power() takes exactly 2 arguments (1 given)
这个时候，默认参数就排上用场了。由于我们经常计算x2，所以，完全可以把第二个参数n的默认值设定为2：

def power(x, n=2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
这样，当我们调用power(5)时，相当于调用power(5, 2)：

>>> power(5)
25
>>> power(5, 2)
25
而对于n > 2的其他情况，就必须明确地传入n，比如power(5, 3)。

从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：

一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；

二是如何设置默认参数。

当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。

使用默认参数有什么好处？最大的好处是能降低调用函数的难度。

举个例子，我们写个一年级小学生注册的函数，需要传入name和gender两个参数：

def enroll(name, gender):
    print 'name:', name
    print 'gender:', gender
这样，调用enroll()函数只需要传入两个参数：

>>> enroll('Sarah', 'F')
name: Sarah
gender: F
如果要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。

我们可以把年龄和城市设为默认参数：

def enroll(name, gender, age=6, city='Beijing'):
    print 'name:', name
    print 'gender:', gender
    print 'age:', age
    print 'city:', city
这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：

>>> enroll('Sarah', 'F')
Student:
name: Sarah
gender: F
age: 6
city: Beijing
只有与默认参数不符的学生才需要提供额外的信息：

enroll('Bob', 'M', 7)
enroll('Adam', 'M', city='Tianjin')
可见，默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的参数来实现。无论是简单调用还是复杂调用，函数只需要定义一个。

有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用enroll('Bob', 'M', 7)，意思是，除了name，gender这两个参数外，最后1个参数应用在参数age上，city参数由于没有提供，仍然使用默认值。

也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用enroll('Adam', 'M', city='Tianjin')，意思是，city参数用传进去的值，其他默认参数继续使用默认值。

默认参数很有用，但使用不当，也会掉坑里。默认参数有个最大的坑，演示如下：

先定义一个函数，传入一个list，添加一个END再返回：

def add_end(L=[]):
    L.append('END')
    return L
当你正常调用时，结果似乎不错：

>>> add_end([1, 2, 3])
[1, 2, 3, 'END']
>>> add_end(['x', 'y', 'z'])
['x', 'y', 'z', 'END']
当你使用默认参数调用时，一开始结果也是对的：

>>> add_end()
['END']
但是，再次调用add_end()时，结果就不对了：

>>> add_end()
['END', 'END']
>>> add_end()
['END', 'END', 'END']
很多初学者很疑惑，默认参数是[]，但是函数似乎每次都“记住了”上次添加了'END'后的list。

原因解释如下：

Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。

所以，定义默认参数要牢记一点：默认参数必须指向不变对象！

要修改上面的例子，我们可以用None这个不变对象来实现：

def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L
现在，无论调用多少次，都不会有问题：

>>> add_end()
['END']
>>> add_end()
['END']
为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。

可变参数

在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。

我们以数学题为例子，给定一组数字a，b，c……，请计算a2 + b2 + c2 + ……。

要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：

def calc(numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
但是调用的时候，需要先组装出一个list或tuple：

>>> calc([1, 2, 3])
14
>>> calc((1, 3, 5, 7))
84
如果利用可变参数，调用函数的方式可以简化成这样：

>>> calc(1, 2, 3)
14
>>> calc(1, 3, 5, 7)
84
所以，我们把函数的参数改为可变参数：

def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
定义可变参数和定义list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：

>>> calc(1, 2)
5
>>> calc()
0
如果已经有一个list或者tuple，要调用一个可变参数怎么办？可以这样做：

>>> nums = [1, 2, 3]
>>> calc(nums[0], nums[1], nums[2])
14
这种写法当然是可行的，问题是太繁琐，所以Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：

>>> nums = [1, 2, 3]
>>> calc(*nums)
14
这种写法相当有用，而且很常见。

关键字参数

可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：

def person(name, age, **kw):
    print 'name:', name, 'age:', age, 'other:', kw
函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数：

>>> person('Michael', 30)
name: Michael age: 30 other: {}
也可以传入任意个数的关键字参数：

>>> person('Bob', 35, city='Beijing')
name: Bob age: 35 other: {'city': 'Beijing'}
>>> person('Adam', 45, gender='M', job='Engineer')
name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}
关键字参数有什么用？它可以扩展函数的功能。比如，在person函数里，我们保证能接收到name和age这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。

和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：

>>> kw = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, city=kw['city'], job=kw['job'])
name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
当然，上面复杂的调用可以用简化的写法：

>>> kw = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, **kw)
name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
参数组合

在Python中定义函数，可以用必选参数、默认参数、可变参数和关键字参数，这4种参数都可以一起使用，或者只用其中某些，但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数。

比如定义一个函数，包含上述4种参数：

def func(a, b, c=0, *args, **kw):
    print 'a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw
在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。

>>> func(1, 2)
a = 1 b = 2 c = 0 args = () kw = {}
>>> func(1, 2, c=3)
a = 1 b = 2 c = 3 args = () kw = {}
>>> func(1, 2, 3, 'a', 'b')
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {}
>>> func(1, 2, 3, 'a', 'b', x=99)
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}
最神奇的是通过一个tuple和dict，你也可以调用该函数：

>>> args = (1, 2, 3, 4)
>>> kw = {'x': 99}
>>> func(*args, **kw)
a = 1 b = 2 c = 3 args = (4,) kw = {'x': 99}
所以，对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。

小结

Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。

默认参数一定要用不可变对象，如果是可变对象，运行会有逻辑错误！

要注意定义可变参数和关键字参数的语法：

*args是可变参数，args接收的是一个tuple；

**kw是关键字参数，kw接收的是一个dict。

以及调用函数时如何传入可变参数和关键字参数的语法：

可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入：func(*(1, 2, 3))；

关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过**kw传入：func(**{'a': 1, 'b': 2})。

使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法

~12、高级特性
***切片
>>> L[0:3]
>>> L[:3]
>>>L[-1]   #记住倒数第一个元素的索引是-1。
>>>L[-2:]

>>> L[:10:2] #前10个数，每两个取一个

>>> L[::5] #所有数，每5个取一个

***迭代
list或tuple可以通过for循环遍历，这种遍历成为迭代(Iteration)
dict、字符串、list、tuple都是可以迭代的，整数不可以
可以用collections模块的Iterable类型判断：
from collections import Iterable
isinstance('abc',Iterable)

Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：

***列表生成式
列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式

个人理解：列表list内直接使用for循环迭代公式生成新的列表

***生成器


~13、 函数式编程
***高阶函数
知识的1、函数本身可以赋值给变量，即：变量可以指向函数
知识点2、函数名也是变量
知识点3、函数的参数能够接受别的函数，这种函数为高阶函数

如:
def add(x,y,f):
    return f(x) + f(y)
Python内建了map()和reduce()
***高阶函数map()
map()函数接受两个参数，1个是函数，一个是序列，把序列的每一个元素按函数的方式进行计算，计算的返回值即是map()函数的返回值（一个序列）

map()把运算规则抽象了，除了计算简单的f(x)=x*x,而且还可以计算复杂的函数，比如map(str,[1,2,3,4,5,6,7,8,9])

***高阶函数reduce()
reduce()函数也接受两个参数（1个是函数，一个是序列），也是把函数作用在序列上(如[x1,x2,x3,x4,x5])，但是该参数函数必须接受2个参数，reduce继续把结果和下一个序列元素做累积计算，
其效果即是reduce(f,[x1,x2,x3,x4,x5]) = f(f(f(f(x1,x2),x3),x4),x5)
>>> def fn(x,y):
        return x*10 + y
>>> reduce(fn,[1,2,3,4,5])
12345

***高阶函数filter()
Python内建的filter()函数用于过滤序列
和map()类似，filter()也接收一个函数和一个序列。和map()不同的时，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。

在一个list中，删掉偶数，只保留奇数，可以这么写
def is_odd(n):
    return n % 2 == 1

filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15])
# 结果: [1, 5, 9, 15]

用filter()这个高阶函数，关键在于正确实现一个“筛选”函数

***高阶函数sorted()和排序算法
Python内建的sorted()函数可以对list进行排序

通常规定，对于两个元素x和y，如果认为x < y，则返回-1，如果认为x == y，则返回0，如果认为x > y，则返回1，这样，排序算法就不用关心具体的比较过程，而是根据比较结果直接排序。

另外，sorted()也是一个高阶函数，可以接收一个自定义的比较函数实现自定义的排序
如sorted([36, 5, 12, 9, 21], lambda x, y: y - x) 和sorted([36, 5, 12, 9, 21][::-1]


高阶函数总结：
1、map函数

~14、模块
一个.py文件就称之为一个模块module，使用模块的好处：
1、提高代码的可维护性
2、模块编写完毕可以供引用
3、避免函数名和变量名冲突
注：应避免函数名、变量名、模块名使用内置函数名字

为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）
请注意，每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。__init__.py可以是空文件，也可以有Python代码
   
   
另导入模块是可以使用别名

***函数和变量的作用域：

正常的函数和变量名是公开的（public），可以被直接引用，比如：abc，x123，PI等

__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途
如__author__,__name__,__doc__

外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。

自定义函数前面加'_'，如_private()等

***安装第三方模块

***使用__future__模块



~学习使用__slots__时


*********************搭建PyCharm开发环境******************************
下载安装PyCharm


字符串和list相互转换
高阶函数 map\reduce\sorted\filter


********************Python 常用内建模块******************************
namedtuple
namedtuple是一个函数，可以用于建立自定义tuple对象，且规定了tuple元素的个数


deque
list索引访问元素很快，但是插入和删除效率低/不方便
deque可以高效插入和删除的双向列表
deque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头部添加或删除元素


理解Python装饰器比较好的解释说明：
https://foofish.net/python-decorator.html